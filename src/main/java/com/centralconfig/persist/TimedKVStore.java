package com.centralconfig.persist;

import java.io.IOException;
import java.util.Map;
import java.util.Optional;

/**
 * A timed key-value store.
 * Values are IMMUTABLE once created but the history of values for a given key is preserved.
 *
 * Timeline of values for a key K:
 *
 *              V1           V2                V3
 *              |-------------|-----------------|
 * time->       TS1         TS2                TS3
 *
 *      getAt(K, TS1 - 1) = absent
 *      getAt(K, ts) = V1 where V1 <= ts < V2
 *      getAt(K, ts) = V2 where V2 <= ts < V3
 *      getAt(K, ts) = V3 where ts >= TS3
 *
 *
 * This interface does not use any proprietary data types (like Document).
 * This makes it easy to have fewer KVStore implementations for different databases, for example
 *
 *
 */
public interface TimedKVStore {

    /**
     * Puts a value at current timestamp (generated by this code).
     * If you want reliable timestamps use putAt()
     * @param key           the key
     * @param value         the value
     * @throws IOException  if something bad happened
     */
    void putNow(String key, String value) throws IOException;

    /**
     * Puts a value at given timestamp. This is only provided since it is near impossible
     * to sync timestamps at different points.
     *
     * @param key           the key
     * @param value         the value
     * @throws IOException  if something bad happened
     */
    void putAt(String key, String value, long timestampMillis) throws IOException;

    /**
     * Gets the value for a key at a given timestamp
     * @param key               the key
     * @param timestampMillis   the timestamp at which value is requested
     * @return the value for key at given timestamp
     */
    Optional<String> getValueAt(String key, long timestampMillis);

    /**
     * Deletes the entire timeline for a key
     * @param key the key
     */
    void deleteAllValuesFor(String key);

}
